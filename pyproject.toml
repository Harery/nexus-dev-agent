[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nexus-dev-agent"
version = "1.0.0"
description = "Autonomous development assistant for VS Code and terminal automation"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Nexus Dev Agent Team", email = "team@nexus-dev-agent.com"}
]
maintainers = [
    {name = "Nexus Dev Agent Team", email = "team@nexus-dev-agent.com"}
]
keywords = ["automation", "vscode", "copilot", "terminal", "ai", "development"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Tools",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "pyautogui>=0.9.54",
    "pynput>=1.7.6",
    "psutil>=5.9.0",
    "opencv-python>=4.7.0",
    "pillow>=9.5.0",
    "numpy>=1.24.0",
    "requests>=2.28.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.3.0",
    "watchdog>=3.0.0",
    "spacy>=3.5.0",
    "scikit-learn>=1.2.0",
    "structlog>=23.1.0",
    "toml>=0.10.2",
    "jsonschema>=4.17.0",
    "cryptography>=40.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.0",
    "sphinx>=6.2.0",
    "sphinx-rtd-theme>=1.2.0",
]
test = [
    "pytest>=7.3.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]
docs = [
    "sphinx>=6.2.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/Harery/nexus-dev-agent"
Documentation = "https://harery.github.io/nexus-dev-agent"
Repository = "https://github.com/Harery/nexus-dev-agent"
Issues = "https://github.com/Harery/nexus-dev-agent/issues"
Changelog = "https://github.com/Harery/nexus-dev-agent/blob/main/CHANGELOG.md"

[project.scripts]
nexus-agent = "nexus_dev_agent.cli:main"
nexus-config = "nexus_dev_agent.config:configure"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["nexus_dev_agent"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyautogui.*",
    "pynput.*",
    "cv2.*",
    "spacy.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"